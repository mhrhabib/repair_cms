import 'package:repair_cms/core/app_exports.dart';
import 'package:repair_cms/features/jobBooking/models/create_job_request.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
part 'job_booking_state.dart';

class JobBookingCubit extends Cubit<JobBookingState> {
  JobBookingCubit() : super(JobBookingInitial());

  // Initialize with empty data
  void initializeJob() {
    emit(
      JobBookingData(
        job: Job(
          jobType: "express",
          jobTypes: "",
          model: "",
          servicesIds: [],
          assignedItemsIds: [],
          userId: "", // Will be set from user data
          loggedUserId: "", // Will be set from user data
          jobStatus: [],
          status: "draft",
          discount: 0,
          vat: 0,
          subTotal: 0,
          total: 0,
          jobNo: "", // Will be generated by backend
          customerId: "",
          customerDetails: CustomerDetails(
            customerId: "",
            type: "Personal",
            type2: "personal",
            organization: "",
            customerNo: "",
            telephone: "",
            telephonePrefix: "+1", // Default prefix
            shippingAddress: Address(id: "", country: "", primary: false, customerId: ""),
            billingAddress: Address(id: "", country: "", primary: false, customerId: ""),
            salutation: "",
            firstName: "",
            lastName: "",
            position: "",
          ),
          location: "", // Will be set from user data
          salutationHTMLmarkup: "",
          termsAndConditionsHTMLmarkup: "",
          receiptFooter: ReceiptFooter(
            companyLogo: "",
            companyLogoURL: "",
            address: CompanyAddress(companyName: "", street: "", num: "", zip: "", city: "", country: ""),
            contact: CompanyContact(ceo: "", telephone: "", email: "", website: ""),
            bank: BankDetails(bankName: "", iban: "", bic: ""),
          ),
          printOption: "A4 Receipt",
        ),
        defect: Defect(jobType: "", defect: [], internalNote: []),
        device: Device(category: "", brand: "", model: "", imei: "", condition: [], deviceSecurity: "no security"),
        contact: Contact(
          type: "Personal",
          customerId: "",
          type2: "personal",
          organization: "",
          customerNo: "",
          telephone: "",
          telephonePrefix: "+1",
          shippingAddress: Address(id: "", country: "", primary: false, customerId: ""),
          billingAddress: Address(id: "", country: "", primary: false, customerId: ""),
          salutation: "",
          firstName: "",
          lastName: "",
          position: "",
        ),
        currentStep: 0,
      ),
    );
  }

  // Update customer information
  void updateCustomerInfo({
    String? salutation,
    String? firstName,
    String? lastName,
    String? telephone,
    String? telephonePrefix,
    String? email,
    String? customerId,
  }) {
    final state = this.state;
    if (state is JobBookingData) {
      emit(
        state.copyWith(
          contact: state.contact.copyWith(
            salutation: salutation ?? state.contact.salutation,
            firstName: firstName ?? state.contact.firstName,
            lastName: lastName ?? state.contact.lastName,
            telephone: telephone ?? state.contact.telephone,
            telephonePrefix: telephonePrefix ?? state.contact.telephonePrefix,
            customerId: customerId ?? state.contact.customerId,
          ),
          job: state.job.copyWith(
            customerDetails: state.job.customerDetails.copyWith(
              salutation: salutation ?? state.job.customerDetails.salutation,
              firstName: firstName ?? state.job.customerDetails.firstName,
              lastName: lastName ?? state.job.customerDetails.lastName,
              telephone: telephone ?? state.job.customerDetails.telephone,
              telephonePrefix: telephonePrefix ?? state.job.customerDetails.telephonePrefix,
              customerId: customerId ?? state.job.customerDetails.customerId,
            ),
          ),
        ),
      );
    }
  }

  // Update device information
  void updateDeviceInfo({
    String? category,
    String? brand,
    String? model,
    String? imei,
    List<ConditionItem>? condition,
    String? deviceSecurity,
  }) {
    final state = this.state;
    if (state is JobBookingData) {
      emit(
        state.copyWith(
          device: state.device.copyWith(
            category: category ?? state.device.category,
            brand: brand ?? state.device.brand,
            model: model ?? state.device.model,
            imei: imei ?? state.device.imei,
            condition: condition ?? state.device.condition,
            deviceSecurity: deviceSecurity ?? state.device.deviceSecurity,
          ),
          job: state.job.copyWith(model: model ?? state.job.model),
        ),
      );
    }
  }

  // Update services
  void updateServices(List<String> servicesIds) {
    final state = this.state;
    if (state is JobBookingData) {
      emit(state.copyWith(job: state.job.copyWith(servicesIds: servicesIds)));
    }
  }

  // Add a service
  void addService(String serviceId) {
    final state = this.state;
    if (state is JobBookingData) {
      final updatedServices = List<String>.from(state.job.servicesIds)..add(serviceId);
      emit(state.copyWith(job: state.job.copyWith(servicesIds: updatedServices)));
    }
  }

  // Remove a service
  void removeService(String serviceId) {
    final state = this.state;
    if (state is JobBookingData) {
      final updatedServices = List<String>.from(state.job.servicesIds)..remove(serviceId);
      emit(state.copyWith(job: state.job.copyWith(servicesIds: updatedServices)));
    }
  }

  // Update assigned items
  void updateAssignedItems(List<String> assignedItemsIds) {
    final state = this.state;
    if (state is JobBookingData) {
      emit(state.copyWith(job: state.job.copyWith(assignedItemsIds: assignedItemsIds)));
    }
  }

  // Update defect information
  void updateDefectInfo({String? jobType, List<DefectItem>? defect, List<dynamic>? internalNote}) {
    final state = this.state;
    if (state is JobBookingData) {
      emit(
        state.copyWith(
          defect: state.defect.copyWith(
            jobType: jobType ?? state.defect.jobType,
            defect: defect ?? state.defect.defect,
            internalNote: internalNote ?? state.defect.internalNote,
          ),
          job: state.job.copyWith(jobTypes: jobType ?? state.job.jobTypes),
        ),
      );
    }
  }

  // Update pricing information
  void updatePricing({double? discount, double? vat, double? subTotal, double? total}) {
    final state = this.state;
    if (state is JobBookingData) {
      emit(
        state.copyWith(
          job: state.job.copyWith(
            discount: discount ?? state.job.discount,
            vat: vat ?? state.job.vat,
            subTotal: subTotal ?? state.job.subTotal,
            total: total ?? state.job.total,
          ),
        ),
      );
    }
  }

  // Update addresses
  void updateShippingAddress(Address address) {
    final state = this.state;
    if (state is JobBookingData) {
      emit(
        state.copyWith(
          contact: state.contact.copyWith(shippingAddress: address),
          job: state.job.copyWith(customerDetails: state.job.customerDetails.copyWith(shippingAddress: address)),
        ),
      );
    }
  }

  void updateBillingAddress(Address address) {
    final state = this.state;
    if (state is JobBookingData) {
      emit(
        state.copyWith(
          contact: state.contact.copyWith(billingAddress: address),
          job: state.job.copyWith(customerDetails: state.job.customerDetails.copyWith(billingAddress: address)),
        ),
      );
    }
  }

  // Update current step
  void updateCurrentStep(int step) {
    final state = this.state;
    if (state is JobBookingData) {
      emit(state.copyWith(currentStep: step));
    }
  }

  // Set user and location data (from authentication/context)
  void setUserData({required String userId, required String loggedUserId, required String location}) {
    final state = this.state;
    if (state is JobBookingData) {
      emit(
        state.copyWith(
          job: state.job.copyWith(userId: userId, loggedUserId: loggedUserId, location: location),
        ),
      );
    }
  }

  // Generate job status
  void generateJobStatus(String userName) {
    final state = this.state;
    if (state is JobBookingData) {
      final jobStatus = JobStatus(
        title: "draft",
        userId: state.job.userId,
        colorCode: "#2589F6",
        userName: userName,
        createAtStatus: DateTime.now().millisecondsSinceEpoch,
        notifications: true,
        notes: "new_job_in_draft",
      );

      emit(state.copyWith(job: state.job.copyWith(jobStatus: [jobStatus])));
    }
  }

  // Get the final request for API call
  CreateJobRequest getCreateJobRequest() {
    final state = this.state;
    if (state is JobBookingData) {
      return CreateJobRequest(job: state.job, defect: state.defect, device: state.device, contact: state.contact);
    }
    throw Exception("Job data not initialized");
  }

  // Clear all data
  void clearData() {
    emit(JobBookingInitial());
  }

  // Check if all required data is filled
  bool isDataComplete() {
    final state = this.state;
    if (state is JobBookingData) {
      return state.contact.firstName.isNotEmpty &&
          state.contact.lastName.isNotEmpty &&
          state.contact.telephone.isNotEmpty &&
          state.device.brand.isNotEmpty &&
          state.device.model.isNotEmpty &&
          state.device.category.isNotEmpty &&
          state.job.servicesIds.isNotEmpty;
    }
    return false;
  }

  // Get progress percentage
  double getProgressPercentage() {
    final state = this.state;
    if (state is JobBookingData) {
      int completedFields = 0;
      int totalFields = 7; // Adjust based on your required fields

      if (state.contact.firstName.isNotEmpty) completedFields++;
      if (state.contact.lastName.isNotEmpty) completedFields++;
      if (state.contact.telephone.isNotEmpty) completedFields++;
      if (state.device.brand.isNotEmpty) completedFields++;
      if (state.device.model.isNotEmpty) completedFields++;
      if (state.device.category.isNotEmpty) completedFields++;
      if (state.job.servicesIds.isNotEmpty) completedFields++;

      return completedFields / totalFields;
    }
    return 0.0;
  }
}
