import 'package:repair_cms/core/app_exports.dart';
import 'package:repair_cms/features/jobBooking/cubits/job/booking/job_booking_cubit.dart';
import 'package:repair_cms/features/jobBooking/models/create_job_request.dart';
import 'package:repair_cms/features/jobBooking/screens/eight/job_booking_job_type_screen.dart';
import 'package:repair_cms/features/jobBooking/widgets/bottom_buttons_group.dart';

class JobBookingAddressScreen extends StatefulWidget {
  const JobBookingAddressScreen({super.key});

  @override
  State<JobBookingAddressScreen> createState() => _JobBookingAddressScreenState();
}

class _JobBookingAddressScreenState extends State<JobBookingAddressScreen> {
  final PageController _pageController = PageController();
  int currentPage = 0;

  // Controllers for first page
  final TextEditingController _addressController = TextEditingController();
  final TextEditingController _houseNumberController = TextEditingController();
  final TextEditingController _cityController = TextEditingController();

  // Controllers for second page
  final TextEditingController _postalCodeController = TextEditingController();
  final TextEditingController _provinceController = TextEditingController();
  final TextEditingController _countryController = TextEditingController();

  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _loadExistingAddressData();
  }

  void _loadExistingAddressData() {
    final state = context.read<JobBookingCubit>().state;
    if (state is JobBookingData) {
      // Load shipping address data if available
      final shippingAddress = state.contact.shippingAddress;
      if (shippingAddress.street != null && shippingAddress.street!.isNotEmpty) {
        _addressController.text = shippingAddress.street!;
      }
      if (shippingAddress.num != null && shippingAddress.num!.isNotEmpty) {
        _houseNumberController.text = shippingAddress.num!;
      }
      if (shippingAddress.city != null && shippingAddress.city!.isNotEmpty) {
        _cityController.text = shippingAddress.city!;
      }
      if (shippingAddress.zip != null && shippingAddress.zip!.isNotEmpty) {
        _postalCodeController.text = shippingAddress.zip!;
      }
      if (shippingAddress.state != null && shippingAddress.state!.isNotEmpty) {
        _provinceController.text = shippingAddress.state!;
      }
      if (shippingAddress.country != null && shippingAddress.country.isNotEmpty) {
        _countryController.text = shippingAddress.country;
      }
    }
  }

  bool get _isFirstPageValid {
    return _addressController.text.isNotEmpty &&
        _houseNumberController.text.isNotEmpty &&
        _cityController.text.isNotEmpty;
  }

  bool get _isSecondPageValid {
    return _postalCodeController.text.isNotEmpty;
    // Province and Country are optional
  }

  void _saveAddressToCubit() {
    setState(() {
      _isLoading = true;
    });

    try {
      final jobBookingCubit = context.read<JobBookingCubit>();

      // Create address object
      final address = Address(
        id: "", // Will be generated by backend
        street: _addressController.text,
        num: _houseNumberController.text,
        city: _cityController.text,
        zip: _postalCodeController.text,
        state: _provinceController.text.isNotEmpty ? _provinceController.text : null,
        country: _countryController.text.isNotEmpty ? _countryController.text : "Deutschland",
        primary: true,
        customerId: "", // Will be set by backend
      );

      // Update both shipping and billing addresses in cubit
      jobBookingCubit.updateShippingAddress(address);
      jobBookingCubit.updateBillingAddress(address);

      debugPrint('✅ Address saved to JobBookingCubit:');
      debugPrint('   📍 Street: ${_addressController.text} ${_houseNumberController.text}');
      debugPrint('   🏙️ City: ${_cityController.text}');
      debugPrint('   📮 Postal Code: ${_postalCodeController.text}');
      debugPrint('   🗺️ Province: ${_provinceController.text}');
      debugPrint('   🌍 Country: ${_countryController.text}');
    } catch (e) {
      debugPrint('❌ Error saving address: $e');
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error saving address: ${e.toString()}')));
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  void _handleNextButton() {
    if (currentPage == 0) {
      if (_isFirstPageValid) {
        _pageController.nextPage(duration: const Duration(milliseconds: 300), curve: Curves.easeInOut);
      } else {
        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Please fill all required fields')));
      }
    } else {
      if (_isSecondPageValid) {
        _saveAddressToCubit();
        _navigateToNextScreen();
      } else {
        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Please fill postal code')));
      }
    }
  }

  void _navigateToNextScreen() {
    Navigator.push(context, MaterialPageRoute(builder: (context) => const JobBookingJobTypeScreen()));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      resizeToAvoidBottomInset: true,
      body: SafeArea(
        child: CustomScrollView(
          slivers: [
            // Progress bar
            SliverToBoxAdapter(
              child: Container(
                width: double.infinity,
                color: Colors.grey[300],
                child: Align(
                  alignment: Alignment.centerLeft,
                  child: Container(
                    height: 12.h,
                    width: MediaQuery.of(context).size.width * .071 * 7,
                    decoration: BoxDecoration(
                      color: AppColors.primary,
                      borderRadius: const BorderRadius.only(topLeft: Radius.circular(6), topRight: Radius.circular(0)),
                      boxShadow: [BoxShadow(color: Colors.grey.shade300, blurRadius: 1, blurStyle: BlurStyle.outer)],
                    ),
                  ),
                ),
              ),
            ),

            // Header with back button
            SliverToBoxAdapter(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Row(
                  children: [
                    if (currentPage == 1) ...[
                      GestureDetector(
                        onTap: () {
                          _pageController.previousPage(
                            duration: const Duration(milliseconds: 300),
                            curve: Curves.easeInOut,
                          );
                          setState(() {
                            currentPage = 0;
                          });
                        },
                        child: Container(
                          padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(color: Colors.grey[300], borderRadius: BorderRadius.circular(8)),
                          child: const Icon(Icons.arrow_back, color: Colors.black87, size: 20),
                        ),
                      ),
                      const SizedBox(width: 16),
                    ],
                    GestureDetector(
                      onTap: () => Navigator.pop(context),
                      child: Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(color: Colors.grey[600], borderRadius: BorderRadius.circular(8)),
                        child: const Icon(Icons.close, color: Colors.white, size: 20),
                      ),
                    ),
                  ],
                ),
              ),
            ),

            // Step indicator
            SliverToBoxAdapter(
              child: Center(
                child: Container(
                  width: 40,
                  height: 40,
                  decoration: const BoxDecoration(color: Colors.blue, shape: BoxShape.circle),
                  child: Center(
                    child: Text(
                      '${7 + currentPage}',
                      style: const TextStyle(color: Colors.white, fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                  ),
                ),
              ),
            ),

            SliverToBoxAdapter(child: const SizedBox(height: 24)),

            // Title
            SliverToBoxAdapter(
              child: Center(
                child: Text(
                  currentPage == 0 ? 'Address details' : 'Additional address details',
                  style: const TextStyle(fontSize: 20, fontWeight: FontWeight.w600, color: Colors.black87),
                ),
              ),
            ),

            SliverToBoxAdapter(child: const SizedBox(height: 32)),

            // Page view for address forms
            SliverToBoxAdapter(
              child: SizedBox(
                height: MediaQuery.of(context).size.height * 0.5,
                child: PageView(
                  controller: _pageController,
                  physics: const NeverScrollableScrollPhysics(), // Disable swipe
                  onPageChanged: (index) {
                    setState(() {
                      currentPage = index;
                    });
                  },
                  children: [_buildFirstAddressForm(), _buildSecondAddressForm()],
                ),
              ),
            ),

            // Page indicators
            SliverToBoxAdapter(
              child: Center(
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [_buildPageIndicator(0), const SizedBox(width: 8), _buildPageIndicator(1)],
                ),
              ),
            ),

            // Add extra space at the bottom for the button
            SliverToBoxAdapter(child: const SizedBox(height: 100)),
          ],
        ),
      ),
      bottomNavigationBar: Padding(
        padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom + 8, left: 24, right: 24),
        child: SizedBox(height: 48, child: BottomButtonsGroup(onPressed: _isLoading ? null : _handleNextButton)),
      ),
    );
  }

  Widget _buildPageIndicator(int pageIndex) {
    return Container(
      width: 8,
      height: 8,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        color: currentPage == pageIndex ? Colors.blue : Colors.grey[300],
      ),
    );
  }

  Widget _buildFirstAddressForm() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Address and House Number Row
          Row(
            children: [
              // Address field
              Expanded(
                flex: 2,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Address*',
                      style: TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: Colors.black87),
                    ),
                    const SizedBox(height: 8),
                    TextField(
                      controller: _addressController,
                      decoration: InputDecoration(
                        hintText: 'Street',
                        hintStyle: TextStyle(color: Colors.grey[400], fontSize: 16),
                        border: UnderlineInputBorder(borderSide: BorderSide(color: Colors.grey[300]!)),
                        enabledBorder: UnderlineInputBorder(borderSide: BorderSide(color: Colors.grey[300]!)),
                        focusedBorder: const UnderlineInputBorder(borderSide: BorderSide(color: Colors.blue, width: 2)),
                        contentPadding: const EdgeInsets.symmetric(vertical: 12),
                      ),
                      style: const TextStyle(fontSize: 16),
                      onChanged: (_) => setState(() {}), // Rebuild to update button state
                    ),
                  ],
                ),
              ),

              const SizedBox(width: 24),

              // House Number field
              Expanded(
                flex: 1,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'No*',
                      style: TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: Colors.black87),
                    ),
                    const SizedBox(height: 8),
                    TextField(
                      controller: _houseNumberController,
                      keyboardType: TextInputType.number,
                      decoration: InputDecoration(
                        hintText: '123',
                        hintStyle: TextStyle(color: Colors.grey[400], fontSize: 16),
                        border: UnderlineInputBorder(borderSide: BorderSide(color: Colors.grey[300]!)),
                        enabledBorder: UnderlineInputBorder(borderSide: BorderSide(color: Colors.grey[300]!)),
                        focusedBorder: const UnderlineInputBorder(borderSide: BorderSide(color: Colors.blue, width: 2)),
                        contentPadding: const EdgeInsets.symmetric(vertical: 12),
                      ),
                      style: const TextStyle(fontSize: 16),
                      onChanged: (_) => setState(() {}), // Rebuild to update button state
                    ),
                  ],
                ),
              ),
            ],
          ),

          const SizedBox(height: 32),

          // City field
          const Text(
            'City*',
            style: TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: Colors.black87),
          ),
          const SizedBox(height: 8),
          TextField(
            controller: _cityController,
            decoration: InputDecoration(
              hintText: 'City name',
              hintStyle: TextStyle(color: Colors.grey[400], fontSize: 16),
              border: UnderlineInputBorder(borderSide: BorderSide(color: Colors.grey[300]!)),
              enabledBorder: UnderlineInputBorder(borderSide: BorderSide(color: Colors.grey[300]!)),
              focusedBorder: const UnderlineInputBorder(borderSide: BorderSide(color: Colors.blue, width: 2)),
              contentPadding: const EdgeInsets.symmetric(vertical: 12),
            ),
            style: const TextStyle(fontSize: 16),
            onChanged: (_) => setState(() {}), // Rebuild to update button state
          ),

          const SizedBox(height: 32),

          // Help text
          Text(
            '* Required fields',
            style: TextStyle(fontSize: 12, color: Colors.grey[600], fontStyle: FontStyle.italic),
          ),
        ],
      ),
    );
  }

  Widget _buildSecondAddressForm() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Postal Code field
          const Text(
            'Postal Code*',
            style: TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: Colors.black87),
          ),
          const SizedBox(height: 8),
          TextField(
            controller: _postalCodeController,
            keyboardType: TextInputType.number,
            decoration: InputDecoration(
              hintText: 'Post code',
              hintStyle: TextStyle(color: Colors.grey[400], fontSize: 16),
              border: UnderlineInputBorder(borderSide: BorderSide(color: Colors.grey[300]!)),
              enabledBorder: UnderlineInputBorder(borderSide: BorderSide(color: Colors.grey[300]!)),
              focusedBorder: const UnderlineInputBorder(borderSide: BorderSide(color: Colors.blue, width: 2)),
              contentPadding: const EdgeInsets.symmetric(vertical: 12),
            ),
            style: const TextStyle(fontSize: 16),
            onChanged: (_) => setState(() {}), // Rebuild to update button state
          ),

          const SizedBox(height: 32),

          // Province field
          const Text(
            'Province',
            style: TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: Colors.black87),
          ),
          const SizedBox(height: 8),
          TextField(
            controller: _provinceController,
            decoration: InputDecoration(
              hintText: 'Province name',
              hintStyle: TextStyle(color: Colors.grey[400], fontSize: 16),
              border: UnderlineInputBorder(borderSide: BorderSide(color: Colors.grey[300]!)),
              enabledBorder: UnderlineInputBorder(borderSide: BorderSide(color: Colors.grey[300]!)),
              focusedBorder: const UnderlineInputBorder(borderSide: BorderSide(color: Colors.blue, width: 2)),
              contentPadding: const EdgeInsets.symmetric(vertical: 12),
            ),
            style: const TextStyle(fontSize: 16),
          ),

          const SizedBox(height: 32),

          // Country field
          const Text(
            'Country',
            style: TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: Colors.black87),
          ),
          const SizedBox(height: 8),
          TextField(
            controller: _countryController,
            decoration: InputDecoration(
              hintText: 'Country name',
              hintStyle: TextStyle(color: Colors.grey[400], fontSize: 16),
              border: UnderlineInputBorder(borderSide: BorderSide(color: Colors.grey[300]!)),
              enabledBorder: UnderlineInputBorder(borderSide: BorderSide(color: Colors.grey[300]!)),
              focusedBorder: const UnderlineInputBorder(borderSide: BorderSide(color: Colors.blue, width: 2)),
              contentPadding: const EdgeInsets.symmetric(vertical: 12),
            ),
            style: const TextStyle(fontSize: 16),
          ),

          const SizedBox(height: 32),

          // Help text
          Text(
            '* Required field',
            style: TextStyle(fontSize: 12, color: Colors.grey[600], fontStyle: FontStyle.italic),
          ),

          const SizedBox(height: 16),

          // Preview of first page data
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.grey[50],
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.grey[300]!),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Address Summary:',
                  style: TextStyle(fontSize: 14, fontWeight: FontWeight.w600, color: Colors.black87),
                ),
                const SizedBox(height: 8),
                Text(
                  '${_addressController.text} ${_houseNumberController.text}',
                  style: const TextStyle(fontSize: 14, color: Colors.black87),
                ),
                Text(_cityController.text, style: const TextStyle(fontSize: 14, color: Colors.black87)),
              ],
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _addressController.dispose();
    _houseNumberController.dispose();
    _cityController.dispose();
    _postalCodeController.dispose();
    _provinceController.dispose();
    _countryController.dispose();
    _pageController.dispose();
    super.dispose();
  }
}
